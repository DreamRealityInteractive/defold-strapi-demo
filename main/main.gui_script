-- After signing up for the Strapi demo at https://strapi.io/demo
-- you will have be given access to the dashboard at a URL such as https://api-uqtg2.strapidemo.com/admin
-- Change root_url here to match (remove "/admin")
local root_url = "https://api-uqtg2.strapidemo.com"

local items = {}
local current_idx = 0

local function parse_string(v)
	if v ~= json.null then
		return v
	else
		return ""
	end
end

local function parse_items(item_json)
	for _, v in ipairs(item_json.data) do
		local item = {}
		item.name = parse_string(v.attributes.name)
		item.description = parse_string(v.attributes.information.description)
		item.imageUrl = v.attributes.images.data[1].attributes.url
		table.insert(items, item)
	end
end

local function fetch_items(cb)
	local api_str = root_url .. "/api/restaurants?populate=*"

	http.request(api_str, "GET", function(self, id, response)
		if response.status == 200 then
			local item_json = json.decode(response.response)
			parse_items(item_json)
			cb()
		end
	end)
end

local function draw_item(i)
	current_idx = i
	local item = items[i]
	
	gui.set_text(gui.get_node("name_text"), item.name)
	gui.set_text(gui.get_node("description_text"), item.description)

	if item.loadedTextureId then
		-- This image is already downloaded and decoded
		gui.set_enabled(self.image_node, true)
		gui.set_texture(self.image_node, item.loadedTextureId)
	else
		-- In the Strapi demo, these URLs are relative, but they could be absolute
		local imageUrl = root_url .. item.imageUrl
		local textureId = hash(imageUrl)
		gui.set_enabled(self.image_node, false)
		
		http.request(imageUrl, "GET", function(self, id, response)
			local img = image.load(response.response)
			local ok, reason = gui.new_texture(textureId, img.width, img.height, img.type, img.buffer)

			if ok then
				-- Set image, and store its texture id for use later
				item.loadedTextureId = textureId
				gui.set_texture(self.image_node, textureId)
				gui.set_enabled(self.image_node, true)
			end
		end)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")

	self.image_node = gui.get_node("image_box")
	
	fetch_items(function()
		draw_item(1)
	end)
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		if gui.pick_node(gui.get_node("prev"), action.x, action.y) and current_idx > 1 then
			draw_item(current_idx - 1)
		elseif gui.pick_node(gui.get_node("next"), action.x, action.y) and current_idx < #items then
			draw_item(current_idx + 1)
		end
	end
end
